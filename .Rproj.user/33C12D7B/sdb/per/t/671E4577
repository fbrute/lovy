{
    "contents" : "library(RMySQL)\n\nlibrary(shiny)\n\ndbg <- 0\n\nshinyServer(function (input, output) {\n        \n        output$apbmplot <- renderPlot({\n                \n                soundingdata <- getData(\"sounding\")\n                \n                matrixadiab <- getAdiabTemps(soundingdata)\n#                 temps <- getAdiabTemps(soundingdata)\n#                 surfs <- getAdiabTemps(soundingdata)\n                \n                \n                \n                if(dbg) browser()\n                \n                temps <- matrixadiab[,1]\n                surfs <- matrixadiab[,2]\n\n                soundingdata['tempadiab'] <- temps\n                soundingdata['surfadiab'] <- surfs\n\n                #data2 <- sqldf(\"select * from \")\n                datelevels <- factor(soundingdata$date)\n                data2 <- subset(soundingdata,select = c(date,surfadiab))\n                dfs <- split(data2, datelevels)\n                lapply(dfs, function(elt) sum(elt$surfadiab))\n                unlist(lapply(dfs, function(elt) sum(elt$surfadiab)))\n                \n                powers <- as.numeric(unlist(lapply(dfs, function(elt) sum(elt$surfadiab))))\n                \n                df.powers <- data.frame(levels(datelevels), powers)\n                df.powers2 <- data.frame(levels(datelevels), powers) \n                \n                colnames(df.powers) <- c(\"date\", \"power\")\n                colnames(df.powers2) <- c(\"date\", \"power\")\n                \n                save(soundingdata, file=\"soundingdata.RData\")\n                save(df.powers, file=\"df.powers.RData\")\n                \n                View(soundingdata)  \n                \n                library(ggplot2)\n                g <- ggplot(soundingdata, aes(temp, pressure))\n                p <- g + geom_point()\n                \n                #if (dbg) browser()    \n                \n                fw <- p + facet_wrap(~ date, ncol = 5, scales = \"free\")  + scale_y_reverse() + geom_path() \n                #     fw <- p + facet_wrap(~ date, ncol = 5) \n                #     fw <- p + facet_wrap(~ date, ncol = 5)  + xlim(10,20) + ylim(900,700) \n                \n                \n                #                 if (dbg) browser()\n                \n                p2 <- fw +  geom_point(aes(tempadiab,pressure), color=\"red\") + geom_path() + geom_line(aes(tempadiab,pressure), color=\"red\")\n                \n                #library(plyr)\n                \n                #df.powers <- ddply(subset(soundingdata), .(date), function(area) sum(area))\n                \n                #library(sqldf)\n                \n                \n                \n                #if (dbg) browser()\n                \n                ppower <- p2 + geom_text(data = df.powers, aes(x = 10, y = 750, label = power), inherit.aes = FALSE, parse = T)\n                print(ppower)\n                #if (dbg) browser()\n                \n                fname <- paste(as.character(input$daterange[1]),\n                               \"_\",\n                               as.character(input$daterange[2]),\n                               \".pdf\",\n                               sep=\"\")\n\n                #ggsave(ppower, file=fname,scale=1.9)\n                        \n                \n                \n                \n                #if (dbg) browser()\n                \n                #     par(mfrow = c(1,2))\n                #     with(soundingyeardata, plot(temp,pressure, type= \"l\", \n                #                      xlim= range(temp), \n                #                      ylim= rev(range(pressure))), main = \"Pressure and Temperature\")\n                #     \n                #     with(soundingyeardata, plot(mixr,pressure,type = \"l\",\n                #                      xlim= range(mixr), \n                #                      ylim= rev(range(pressure))), main = \"Pressure and Mixed Ratio\")\n                \n        })\n        \n        getAdiabTempsforOneDate <- function (data) {\n                # go through all columns for same date\n                temps <- numeric()\n                for (i in 1:length(data)) {\n                      \n                        if (i == 1)\n                                temps[i] = data$temp[i]\n                        else\n                                temps[i] = calcAdiabTemp(temps[i-1], \n                                                         data$pressure[i-1], \n                                                         data$pressure[i])\n                }\n                temps\n        }\n        \n        getAdiabTemps <- function (data1) {\n                # go through all columns for same date\n                temps <- numeric()\n                surfs <- numeric()\n                currentdate <- Sys.Date()\n                triangle <- F\n                for (i in 1:nrow(data1)) { \n                        #if (dbg) browser()\n                        if (data1$date[i] != currentdate){\n                                temps[i] <- data1$temp[i]\n                                surfs[i] <- 0\n                                triangle <- T\n                                currentdate <- data1$date[i]\n                        }\n                                \n                        else {\n                                temps[i] = calcAdiabTemp(temps[i-1], \n                                                         data1$pressure[i-1], \n                                                         data1$pressure[i])\n                                if (triangle) {\n                                        # side a of triangle, parallel to x axis\n                                        a <- abs(temps[i] - data1$temp[i])\n                                        \n                                        # side b of triangle along the sounding curve\n                                        b <- calcDistance(temps[i-1], data1$pressure[i-1],\n                                                          data1$temp[i], data1$pressure[i])\n                                        # side c of triangle along the adiabatic curve\n                                        c <- calcDistance(temps[i-1], data1$pressure[i-1],\n                                                          temps[i], data1$pressure[i])\n                                        \n                                        #if (dbg) browser()\n                                        \n                                        surfs[i] <- round(calcTriangleArea(a,b,c),0)\n                                                        \n                                        triangle <- F} \n                                        \n                                else {\n                                        # side a,  at top of trapeze\n                                        a <- abs(temps[i] - data1$temp[i])\n                                        # size b, along the sounding curve\n                                        b <- calcDistance(temps[i-1], data1$pressure[i-1],\n                                                          data1$temp[i], data1$pressure[i])\n                                        # side c,  at bottom of trapeze\n                                        c <- abs(data1$temp[i-1] - temps[i-1])\n                                        # side d, along the adiabatic curve\n                                        d <- calcDistance(temps[i-1], data1$pressure[i-1],\n                                                          temps[i], data1$pressure[i])\n                                        h <- abs(data1$pressure[i] - data1$pressure[i-1])\n                                        #surfs[i] <- calcTrapezeArea(max(a,c),b,min(a,c),d)\n                                        surfs[i] <- round(calcTrapezeArea(a,c,h),0)\n#                                         surf <- calcTrapezeArea(a,b,c,d)\n#                                         \n#                                         if (is.nan(surf))\n#                                                 surfs[i] <- a*b\n#                                         else\n#                                                 surfs[i] <- surf  \n                                        }\n                        }\n                }\n                #temps\n                matrixadiab <- c(temps,surfs)\n                dim(matrixadiab) <- c(nrow(data1),2)\n                matrixadiab\n        }        \n        \n        calcTriangleArea <- function (a=1,b=1,c=sqrt(2)) {\n                s <- 1/2 * (a + b + c)\n                sqrt(s * (s-a) * (s-b) * (s-c))}\n        \n        calcTrapezeAreaBof <- function (a=4,b=sqrt(5),c=6,d=sqrt(5)) {\n                (a + c) / (4 * abs(a-c)) * sqrt(( a + b - c + d) * (a - b - c + d) *\n                        (a + b - c - d) * (-a + b + c + d))\n        }\n        calcTrapezeArea <- function (b1=4, b2=5, h=2) {\n                (b1+b2)/2*h\n                \n        }\n        calcDistance <- function (x1=0, y1=0, x2=1,y2=1) {\n                sqrt((x2-x1)^2 + (y2-y1)^2)\n        }\n        calcAdiabTemp <- function (T1, P1, P2) {\n                # Compute Adiabatic Temperature\n                k = 0.2857\n                 T2 <- (P2 / P1)^k * (T1 + 273.15)\n#                T2 <- (P2^k / P1) * (T1 + 273.15)\n\n                T2 - 273.15\n        }\n        \n        getData <- function(datatype=\"\"){\n                # Init string to know if it is valid at the end of the function\n                QueryString <- \"\"\n                #                 if (dbg) browser()\n                \n                if (datatype == \"sounding\")\n                        QueryString <- paste( \n                                \"select date, time , pressure, height, mixr, temp\", \n                                \"from sounding1\",\n                                \"where date between\", \"'\", input$daterange[1], \"'\" ,\n                                \"and\" , \"'\", input$daterange[2], \"'\" ,\n                                \"and time = '12:00:00'\",\n                                \"and pressure between\", input$lowerpressure ,\"and\", input$higherpressure,\n                                \"order by date, pressure desc;\"\n                        )\n                \n                #if (dbg) browser()\n                if (QueryString != \"\")\n                        return(getMysqlData(QueryString))\n                \n        }\n        \n        getMysqlData <- function(queryString=\"\"){\n                #   View(queryString)\n                con = dbConnect(dbDriver(\"MySQL\"), user=\"dbmeteodb\", \n                                password=\"dbmeteodb\",\n                                dbname=\"dbmeteodb\",\n                                host=\"localhost\")\n                \n                # send the query\n                #                 if (dbg) browser()\n                queryResultsData <- dbSendQuery(con, queryString)\n                \n                \n                #get the data\n                data <- fetch(queryResultsData, n=-1)\n                # freeing resources\n                dbClearResult(queryResultsData) \n                dbDisconnect(con)\n                View(data)  \n                data\n        }\n        \n})\n# TODO\n# décalage d'une heure entre pm10_16 et pm10_24, ok entre 1 et 23 pour l'instant\n# comment traiter les jours où il y a peu de données aot ? moins de 3 ?\n",
    "created" : 1414161293000.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3976225207",
    "id" : "671E4577",
    "lastKnownWriteTime" : 1414509933,
    "path" : "~/Documents/Trafin/lovy/soundingbymonth/server.R",
    "project_path" : "soundingbymonth/server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}