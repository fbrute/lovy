{
    "contents" : "library(DBI)\nlibrary(RMySQL)\n\n# Signal Debug mode\ndbg <- F\n\n# Signal sql strings test, no connection to database established\nsqltest <- FALSE\n\nmainByYear <- function() {\n        library(XML)\n#         fileurls <- c(\"~/Documents/Trafin/aptf/2012/soundings//station raizet janvier 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet fevrier 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet mars 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet avril 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet mai 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet juin 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet juillet 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet septembre 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet octobre 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet novembre 2012.htm\",\n#                       \"~/Documents/Trafin/aptf/2012/soundings//station raizet decembre 2012.htm\")\n        \n        fileurls <- c(#\"~/Documents/Trafin/lovy/soundings/jan 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mar 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mai 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/juillet 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/aout 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/oct 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/dec 2008.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/jan 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mars 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mai 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/juillet 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/aout 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/oct 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/decembre 2009.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/jan 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mars 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mai 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/juillet 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/aout 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/oct 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/Decembre 2010.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/Jan 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mars 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/mai 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/juillet 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/aout 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/oct 2011.htm\",\n                      #\"~/Documents/Trafin/lovy/soundings/dec 2011.htm\"\n                      )\n        for (i in 1:length(fileurls)) {\n                mainByMonth(fileurls[i])\n        }\n        \n}\n\nmainByMonth <- function(fileurl) {\n \n        # Open a file containing data\n        \n        # con = url(\"\")\n        # htmlcode = readLines(con)\n        # close(con)\n        # \n        # htmlcode\n        \n        #htmlcode = read\n#         library(XML)\n#         fileurl <- \"~/Documents/Trafin/aptf/2012/soundings//station raizet aout 2012.htm\"\n        if (!file.exists(fileurl)) return\n        \n        doc <- htmlTreeParse(fileurl, useInternal=TRUE)\n        \n        rootnode <- xmlRoot(doc)\n        # h2 contains head of one sounding, including date of course ;-))\n        # we can get 2 soundings a day (00Z and 12Z)\n        headstrings <- xpathSApply(doc,\"//h2\", xmlValue)\n        datastrings <- xpathSApply(doc,\"//pre\", xmlValue)\n        #<\n        if (!sqltest) {con = dbConnect(dbDriver(\"MySQL\"), user=\"dbmeteodb\", \n                password=\"dbmeteodb\",\n                dbname=\"dbmeteodb\",\n                host=\"localhost\")}\n        \n        if (dbg) browser()\n        \n        for (i in 1:length(headstrings)){\n                # pre contains the data (odd values) or the context (even values) \n                # of the soundings\n                headstring <- xpathSApply(doc,\"//h2\", xmlValue)[i]\n                datastring <- xpathSApply(doc,\"//pre\", xmlValue)[2*i-1]\n                \n                tryCatch(\n                        importData(headstring, datastring, con), \n                        finally = dbDisconnect(con)\n                        )\n        }  \n        \n        dbDisconnect(con)\n}\n\nmainByDay <- function() {\ndbg <- 0\n\n# con = url(\"\")\n# htmlcode = readLines(con)\n# close(con)\n# \n# htmlcode\n\n#htmlcode = read\nlibrary(XML)\nfileurl <- \"~/Documents/Trafin/aptf/2012/soundings//station raizet aout 2012.htm\"\n\ndoc <- htmlTreeParse(fileurl, useInternal=TRUE)\n\nrootnode <- xmlRoot(doc)\n# h2 contains head of one sounding, including date of course ;-))\n# we can get 2 soundings a day (00Z and 12Z)\nxpathSApply(doc,\"//h2\", xmlValue)[1]\n\n# pre contains the data (odd values) or the context (even values) of the soundings\nxpathSApply(doc,\"//pre\", xmlValue)[1]\ndatastring <- xpathSApply(doc,\"//pre\", xmlValue)[1]\nheadstring <- xpathSApply(doc,\"//h2\", xmlValue)[1]\ndateofsounding <- getDate(headstring)\ntimeofsounding <- getTime(headstring)\ndata1 <- getData(datastring, dateofsounding, timeofsounding)\n#data1 <- data1[order(data1$pressure, decreasing = TRUE),]\nwith(data1, plot(temp,pressure, type= \"l\", \n                 xlim= range(temp), \n                 ylim= rev(range(pressure))))\n\nwith(data1, plot(mixr,pressure,type = \"l\",\n     xlim= range(mixr), \n     ylim= rev(range(pressure))))\nView(data1)\nView(data1$pressure)\ndata1\n}\n\ngetSoundingData <- function() {\n        \n        # con = url(\"\")\n        # htmlcode = readLines(con)\n        # close(con)\n        # \n        # htmlcode\n        \n        #htmlcode = read\n        library(XML)\n        fileurl <- \"~/Documents/Trafin/aptf/2012/soundings//station raizet aout 2012.htm\"\n        \n        doc <- htmlTreeParse(fileurl, useInternal=TRUE)\n        \n        rootnode <- xmlRoot(doc)\n        # h2 contains head of one sounding, including date of course ;-))\n        # we can get 2 soundings a day (00Z and 12Z)\n        xpathSApply(doc,\"//h2\", xmlValue)[1]\n        \n        # pre contains the data (odd values) or the context (even values) of the soundings\n        xpathSApply(doc,\"//pre\", xmlValue)[1]\n        datastring <- xpathSApply(doc,\"//pre\", xmlValue)[1]\n        \n        # get a list of strings representing each an observation\n        strings <- strsplit(datastring, \"\\n\")\n        \n        # data begins at line 5 since we need to skip 4 lines of header with names of columns\n        # each line is an observation at a different pressure\n        x1 <- as.numeric(unlist(strsplit(unlist(strings)[5],\" \")))\n        \n        # remove NAs\n        x1 <- x1[!is.na(x1)]\n        \n        x2 <- as.numeric(unlist(strsplit(unlist(strings)[6],\" \")))\n        \n        # remove NAs\n        x2 <- x2[!is.na(x2)]\n        \n        matrix1 <- rbind(x1,x2)\n        # get date of sounding\n        stringContainingDate <- xpathSApply(doc,\"//h2\", xmlValue)[1]\n        posDate <- regexpr(\"[0-9]{2} [a-yA-Y]* [0-9]{4}$\",stringContainingDate)\n        strDate <- substr(stringContainingDate, posDate[1],\n                          posDate[1] + attr(posDate,\"match.length\") -1)\n        \n        # save local time\n        lct <- Sys.getlocale(\"LC_TIME\")\n        \n        as.Date(strDate,\"%d %b %Y\")\n        \n        dateofsounding <- getDate(xpathSApply(doc,\"//h2\", xmlValue)[1])\n        # restore local time\n        Sys.setlocale(\"LC_TIME\",lct)\n        \n        timeofsounding <- getTime(xpathSApply(doc,\"//h2\", xmlValue)[1])\n        browser()\n        getData(datastring)\n        \n        \n}\n\ngetDate  <- function(text) {\n        # example in text : 01 Aug 2012\n        # get date of sounding, 2012-08-01 (yy-mm-dd by default) \n        posDate <- regexpr(\"[0-9]{2} [a-yA-Y]* [0-9]{4}$\",text)\n        strDate <- substr(text, posDate[1],\n                          posDate[1] + attr(posDate,\"match.length\") -1)\n        \n        # fix NAs with default local system\n        Sys.setlocale(\"LC_TIME\", \"C\")\n        as.Date(strDate,\"%d %b %Y\")\n        \n}\n\ngetTime  <- function(text) {\n        # example in text : at 12Z 01 Aug 2012\n        # get time of sounding : 12 \n        posDate <- regexpr(\"[0-9]{2}Z\",text)\n        datestr <- substr(text, posDate[1],\n               posDate[1] + attr(posDate,\"match.length\") -2) # - 2 to get rid of \"Z\"\n        paste(datestr,\":00:00\", sep=\"\")\n}\n\ngetStationNumber  <- function(text) {\n        # example in text : at 12Z 01 Aug 2012\n        # get time of sounding : 12 \n        str <- substr(text, 1, 5)\n}\n\ngetStationName  <- function(text) {\n        # example in text : at 12Z 01 Aug 2012\n        # get time of sounding : 12 \n        pos <- regexpr(\"^.*Observations\",text)\n        str <- substr(text, 7 , 7 + attr(pos,\"match.length\") -1 -12 -7)\n}\n\ngetData <- function(datastrings, dateofsounding, timeofsounding) {\n        # get a list of strings representing each an observation\n        strings <- strsplit(datastrings, \"\\n\")\n        #matrixdata <- matrix(nrow=1, ncol=11)\n        # data begins at line 5 since we need to skip 4 lines of header with names of columns\n        nallrowsofdata <- length(unlist(strings))\n        nrowsofdata <- 0\n        datasounding <- numeric()\n        for (i in 5:nallrowsofdata){\n                #browser()\n                # each line is an observation at a different pressure\n                rowdata <- as.numeric(unlist(strsplit(unlist(strings)[i],\" \")))\n                \n                # remove NAs\n                rowdata <- rowdata[!is.na(rowdata)]\n                \n                if (length(rowdata) == 11){\n                        #matrixdata <- rbind(matrixdata,row\n                        # append data of raws in vector data\n                        #if (!exists(datasounding, datasounding = numeric()))\n                        datasounding <- c(datasounding,rowdata)\n                        # send row to database\n                        injectRow2Db(rowdata, dateofsounding, timeofsounding)\n                        nrowsofdata <- nrowsofdata + 1\n                }\n                # we save the number of lines retained\n        }\n        # transform data into a matrix\n        datasounding <-matrix(datasounding,nrow = nrowsofdata,ncol = 11, , byrow = TRUE)\n        datasounding <- data.frame(datasounding, row.names = 1:nrowsofdata )\n        colnames(datasounding) <- c(\"pressure\",\"heigt\",\"temp\",\"dwpt\",\n                                     \"relhumidity\",\"mixr\",\"drct\",\"snkt\",\"thta\",\n                                     \"thte\",\"thtv\")\n        #matrixdata <- matrixdata[2:dim(matrixdata)[2]-1,]\n        #browser()\n        datasounding\n}\n\nimportData <- function(headstring, datastrings, con) {\n        # get a list of strings representing each an observation\n        strings <- strsplit(datastrings, \"\\n\")\n        dateofsounding <- getDate(headstring)\n        timeofsounding <- getTime(headstring)\n        station_number <- getStationNumber(headstring)\n        station_name <- getStationName(headstring)\n        #matrixdata <- matrix(nrow=1, ncol=11)\n        # data begins at line 5 since we need to skip 4 lines of header with names of columns\n        nallrowsofdata <- length(unlist(strings))\n        datasounding <- numeric()\n        for (i in 5:nallrowsofdata){\n                #browser()\n                # each line is an observation at a different pressure\n                rowdata <- as.numeric(unlist(strsplit(unlist(strings)[i],\" \")))\n                \n                # remove NAs\n                rowdata <- rowdata[!is.na(rowdata)]\n                \n                if (length(rowdata) == 11){\n                        # send row to database\n                        injectRow2Db(rowdata, station_number, station_name,\n                                     dateofsounding, timeofsounding, con)\n                }\n        }\n}\n\nquote <- function(string){\n        paste (\"'\",string,\"'\", sep=\"\")\n}\n\nsqlpaste <- function(strings){\n        for (i in 1:length(strings)) {\n                print(strings[i])\n        }\n}\n\ninjectRow2Db <- function(data, station_number, \n                         station_name, dateofsounding, timeofsounding, con) {\n#         library(RMySQL)\n#         con = dbConnect(dbDriver(\"MySQL\"), user=\"dbmeteodb\", \n#                         password=\"dbmeteodb\",\n#                         dbname=\"dbmeteodb\",\n#                         host=\"localhost\")\n        \n\n\n        sqlstr <- paste(\"insert into sounding1\", \n                        \"(station_number, station_name ,date,time, pressure,\",\n                        \"height,temp, dwpt,\",\n                        \"relhumidity, mixr, drct, snkt, thta, thte, thtv)\",\n                        \"values(\",\n                        station_number ,\",\",\n                        quote(station_name),\",\",\n                        quote(dateofsounding),\",\",\n                        quote(timeofsounding),\",\", \n                        data[1],\",\",\n                        data[2],\",\",\n                        data[3],\",\",\n                        data[4],\",\",\n                        data[5],\",\",\n                        data[6],\",\",\n                        data[7],\",\",\n                        data[8],\",\",\n                        data[9],\",\",\n                        data[10],\",\",\n                        data[11],\n                        \")\"    \n        )\n        #browser()\n#         tryCatch(dbSendQuery(con,\n#                     sqlstr), finally = dbDisconnect(con))\n        dbSendQuery(con, sqlstr)\n  \n        #dbDisconnect(con)\n        #browser()\n\n}",
    "created" : 1414087451263.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "753469214",
    "id" : "3BD8F459",
    "lastKnownWriteTime" : 1412949840,
    "path" : "~/Documents/Trafin/lovy/import_sounding.R",
    "project_path" : "import_sounding.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}